/* Generated By:JavaCC: Do not edit this line. DartCompiler.java */
class Variable {
    public String type;
    public String name;
    private String value;
    public boolean isInit;
    public boolean isClass;
    public java.util.HashMap<String, Variable> classAttributes;
    public java.util.ArrayList<Variable> attributesList;


    public Variable(String type, String name, boolean isClass) {
        this.type = type;
        this.name = name;
        this.isInit = false;
        this.isClass = isClass;
        this.value = "null";

        if(this.isClass)
        {
            this.classAttributes = new java.util.HashMap<String, Variable>();
            this.attributesList = new java.util.ArrayList<Variable>();
        }
        else
        {
            this.classAttributes = null;
        }
    }

    public void setValue(String value)
    {
        this.value = value;
        if(this.value != "null")
            this.isInit = true;
        else
            this.isInit = false;
    }

    public String getValue()
    {
        return this.value;
    }

}

public class DartCompiler implements DartCompilerConstants {
    public static String code = "";
    public static String javaCodeStart = "";
    public static String declaredClasses = "\u005cn\u005ct";
    public static int counterForNumOfParams = 0;
    public static java.util.HashMap<String, Variable> varTable = new java.util.HashMap<String, Variable>();
    public static java.util.HashSet<String> isClassDefined = new java.util.HashSet<String>();
    public static void main(String[] args) {
        DartCompiler p = null;
        java.io.FileWriter out = null;
        java.io.File javaTarget = null;

        System.out.println("Reading from file " + args[0]);
        try {
            p = new DartCompiler(new java.io.FileInputStream(args[0]));
            javaTarget = new java.io.File(args[1]);
            out = new java.io.FileWriter(javaTarget);
            javaCodeStart = "public class " + javaTarget.getName() + " {";
        }
        catch(java.io.FileNotFoundException e) {
            System.out.println("Error in reading file");
        }
        catch(java.io.IOException e) {
            System.out.println("Error in Writing");
        }


        try {
            p.Program();
            code = javaCodeStart + declaredClasses + "\u005cn\u005ctpublic static void main(String[] args){\u005cn\u005ct\u005ct" + code + "\u005cn" + "\u005ct}" + "\u005cn" + "}";

            out.write(code);
            out.close();
            System.out.println("Parsing was done successfully");
        }
        catch(ParseException e) {
            System.out.println("Error in parsing");
            System.out.println(e.getMessage());
        }
        catch(TokenMgrError e) {
            System.out.println("There was an error in analyzing the code");
            System.out.println(e.getMessage());
        }
        catch(java.io.IOException e) {
            System.out.println("Error in Writing");
        }
    }

  static final public void Program() throws ParseException {
                   String s1, s2;
    s1 = Statement();
    s2 = Statements();
    jj_consume_token(0);
        code = s1 + s2;
  }

  static final public String Statements() throws ParseException {
                        String s1, s2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
    case DEC_INT:
    case DEC_STRING:
    case DEFINE:
    case IDENTIFIER:
      s1 = Statement();
      s2 = Statements();
        {if (true) return "\u005ct\u005ct" + s1 + s2;}
      break;
    default:
      jj_la1[0] = jj_gen;

      {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Statement() throws ParseException {
                       String res; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEC_INT:
    case DEC_STRING:
      res = Declare();
                      {if (true) return res + "\u005cn";}
      break;
    case DEFINE:
      DefObj();
               {if (true) return "";}
      break;
    case PRINT:
      res = Print();
                    {if (true) return res + "\u005cn";}
      break;
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
        counterForNumOfParams = 0;
      res = DeclareObjOrAssign(id.image);
        if(isClassDefined.contains(id.image))
        {
            String className = id.image.substring(0, 1).toUpperCase() + id.image.substring(1);
            {if (true) return className + " " + res + "\u005cn";}
        }

        {if (true) return id.image + " " + res + "\u005cn";}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Declare() throws ParseException {
                    String res = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEC_INT:
      res = DecInt();
      break;
    case DEC_STRING:
      res = DecStr();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI_COLON);
        if(res != "")
        {
            if(res.charAt(res.length()-1) == '}')
            {
                {if (true) return res + "\u005cn";}
            }
            {if (true) return res + ";\u005cn";}
        }
    throw new Error("Missing return statement in function");
  }

  static final public String DecInt() throws ParseException {
                   String res1, res2; Token id;
    jj_consume_token(DEC_INT);
    id = jj_consume_token(IDENTIFIER);
        if(varTable.containsKey(id.image))
            {if (true) throw new ParseException(id.image + " is already defined");}

        Variable var = new Variable("Integer", id.image, false);
        varTable.put(id.image, var);
    res1 = DecIntAssign(id.image);
    res2 = MoreIdentifierInt("Integer");
        {if (true) return "Integer " + id.image + res1 + res2;}
    throw new Error("Missing return statement in function");
  }

  static final public String DecStr() throws ParseException {
                   String res1, res2; Token id;
    jj_consume_token(DEC_STRING);
    id = jj_consume_token(IDENTIFIER);
        if(varTable.containsKey(id.image))
            {if (true) throw new ParseException(id.image + " is already defined");}

        Variable var = new Variable("String", id.image, false);
        varTable.put(id.image, var);
    res1 = DecStringAssign(id.image);
    res2 = MoreIdentifierString("String");
        {if (true) return "String " + id.image + res1 + res2;}
    throw new Error("Missing return statement in function");
  }

  static final public String DecIntAssign(String identifier) throws ParseException {
                                          String op, valInt, innerVal, opQmInt, type; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case OP2:
      op = OpAssign(identifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        valInt = ValueInt();
        if(op == "=")
        {
            if(varTable.get(identifier) == null)
                {if (true) throw new ParseException(identifier + " is not declared");}

            Variable currVar = varTable.get(identifier);

            if(!currVar.isInit)
            {
                currVar.setValue(valInt);
            }

            {if (true) return " = " + valInt;}
        }
        else if(op == "??=")
        {
            // check if identifier is null
            if(varTable.get(identifier) == null)
                {if (true) throw new ParseException(identifier + " is not declared");}

            Variable currVar = varTable.get(identifier);

            if(!currVar.isInit)
            {
                currVar.setValue(valInt);
            }

            {if (true) return ";\u005cn\u005ct\u005ctif(" + identifier + " == null){\u005cn\u005ct\u005ct\u005ct" + identifier + " = " + valInt + ";\u005cn\u005ct\u005ct}";}
        }
        break;
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
            type = varTable.get(id.image).type;
        innerVal = innerValue(type, id.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP1:
          opQmInt = OpQMInt(id.image, identifier);
                if(op == "=")
                {
                    if(varTable.get(identifier) == null)
                        {if (true) throw new ParseException(identifier + " is not declared");}

                    Variable currVar = varTable.get(identifier);
                    Variable idVar = varTable.get(id.image);

                    if(idVar == null)
                    {
                        {if (true) throw new ParseException(id.image + " is not defined");}
                    }


                    if(!currVar.isInit)
                    {
                        currVar.setValue(idVar.getValue());
                    }

                    {if (true) return " = " + id.image + innerVal + " " + opQmInt;}
                }
                else if(op == "??=")
                {
                    // check if identifier is null
                    if(varTable.get(identifier) == null)
                        {if (true) throw new ParseException(identifier + " is not declared");}

                    Variable currVar = varTable.get(identifier);
                    Variable idVar = varTable.get(id.image);

                    if(idVar == null)
                    {
                        {if (true) throw new ParseException(id.image + " is not defined");}
                    }


                    if(!currVar.isInit)
                    {
                        currVar.setValue(idVar.getValue());
                    }

                    {if (true) return ";\u005cn\u005ct\u005ctif(" + identifier + " == null){\u005cn\u005ct\u005ct\u005ct" + identifier + " = " + idVar.getValue() + ";\u005cn\u005ct\u005ct}";}
                }
          break;
        default:
          jj_la1[3] = jj_gen;

                if(op == "=")
                {
                    if(varTable.get(identifier) == null)
                        {if (true) throw new ParseException(identifier + " is not declared");}

                    Variable currVar = varTable.get(identifier);
                    Variable idVar = varTable.get(id.image);

                    if(idVar == null)
                    {
                        {if (true) throw new ParseException(id.image + " is not defined");}
                    }


                    if(!currVar.isInit)
                    {
                        currVar.setValue(idVar.getValue());
                    }

                    {if (true) return "= " + id.image + innerVal;}
                }
                else if(op == "??=")
                {
                    // check if identifier is null
                    if(varTable.get(identifier) == null)
                        {if (true) throw new ParseException(identifier + " is not declared");}

                    Variable currVar = varTable.get(identifier);
                    Variable idVar = varTable.get(id.image);

                    if(idVar == null)
                    {
                        {if (true) throw new ParseException(id.image + " is not defined");}
                    }


                    if(!currVar.isInit)
                    {
                        currVar.setValue(idVar.getValue());
                    }

                    {if (true) return ";\u005cn\u005ct\u005ctif(" + identifier + " == null){\u005cn\u005ct\u005ct\u005ct" + identifier + " = " + idVar.getValue() + ";\u005cn\u005ct\u005ct}";}
                }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;

         {if (true) return " = null";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String DecStringAssign(String identifier) throws ParseException {
                                             String op, valStr, innerVal, opQmStr, type; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case OP2:
      op = OpAssign(identifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        valStr = ValueString();
        if(op == "=")
        {
            varTable.get(identifier).setValue(valStr);
            {if (true) return " = " + valStr;}
        }
        else if(op == "??=")
        {
            // check if identifier is null
            if(varTable.get(identifier) == null)
                {if (true) throw new ParseException(identifier + " is not declared");}

            Variable currVar = varTable.get(identifier);

            if(!currVar.isInit)
            {
                currVar.setValue(valStr);
            }
            {if (true) return ";\u005cn\u005ct\u005ctif(" + identifier + " == null){\u005cn\u005ct\u005ct\u005ct" + identifier + " = " + valStr + ";\u005cn\u005ct\u005ct}";}
        }
        break;
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
            type = varTable.get(id.image).type;
        innerVal = innerValue(type, id.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP1:
          opQmStr = OpQMStr(id.image);
                if(op == "=")
                {
                    {if (true) return " = " + id.image + innerVal + " " + opQmStr;}
                }
                else if(op == "??=")
                {
                    // check if identifier is null
                    if(varTable.get(identifier) == null)
                        {if (true) throw new ParseException(identifier + " is not declared");}

                    Variable currVar = varTable.get(identifier);
                    Variable idVar = varTable.get(id.image);

                    if(idVar == null)
                    {
                        {if (true) throw new ParseException(id.image + " is not defined");}
                    }

                    if(idVar.type == "Integer")
                        {if (true) throw new ParseException(id.image + " is not a string");}


                    if(!currVar.isInit)
                    {
                        currVar.setValue(idVar.getValue());
                    }

                    {if (true) return ";\u005cn\u005ct\u005ctif(" + identifier + " == null){\u005cn\u005ct\u005ct\u005ct" + identifier + " = " + idVar.getValue() + ";\u005cn\u005ct\u005ct}";}
                }
          break;
        default:
          jj_la1[6] = jj_gen;

                if(op == "=")
                {
                    String res = id.image;

                    if(varTable.get(identifier) == null)
                        {if (true) throw new ParseException(identifier + " is not declared");}

                    Variable currVar = varTable.get(identifier);
                    Variable idVar = varTable.get(id.image);

                    if(idVar == null)
                    {
                        {if (true) throw new ParseException(id.image + " is not defined");}
                    }

                    if(idVar.type == "Integer")
                        {if (true) throw new ParseException(id.image + " is not a string");}

                    if(idVar.type != "Integer" && idVar.type != "String")
                        res += ".toString()";

                    if(!currVar.isInit)
                    {
                        currVar.setValue(idVar.getValue());
                    }

                    {if (true) return "= " + res + innerVal;}
                }
                else if(op == "??=")
                {
                    // check if identifier is null
                    if(varTable.get(identifier) == null)
                        {if (true) throw new ParseException(identifier + " is not declared");}

                    Variable currVar = varTable.get(identifier);
                    Variable idVar = varTable.get(id.image);

                    if(idVar == null)
                    {
                        {if (true) throw new ParseException(id.image + " is not defined");}
                    }


                    if(!currVar.isInit)
                    {
                        currVar.setValue(idVar.getValue());
                    }

                    {if (true) return ";\u005cn\u005ct\u005ctif(" + identifier + " == null){\u005cn\u005ct\u005ct\u005ct" + identifier + " = " + idVar.getValue() + ";\u005cn\u005ct\u005ct}";}
                }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;

         {if (true) return " = null";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String DecObjAssign(String identifier) throws ParseException {
                                          String op = "", valueObj = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case OP2:
      op = OpAssign(identifier);
      valueObj = ValueObj(identifier);
        if(op == "=")
        {
            {if (true) return op + " " + valueObj;}
        }

        else if(op == "??=")
        {

            String retVal = " = " + valueObj + " == null ? null : " + valueObj;
            {if (true) return retVal;}
        }
      break;
    default:
      jj_la1[9] = jj_gen;

         {if (true) return " = null";}
    }
    throw new Error("Missing return statement in function");
  }

// if from = 1 then we got here from DecIntAssign
// if from = 2 then we got here from DecStrAssign 
  static final public String OpAssign(String identifier) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP2:
      jj_consume_token(OP2);
        //check if identifier is null
        {if (true) return "??=";}
      break;
    case EQ:
      jj_consume_token(EQ);
        {if (true) return "=";}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String ValueInt() throws ParseException {
                     Token val;
    val = jj_consume_token(NUM);
                  {if (true) return val.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String ValueString() throws ParseException {
                        Token val;
    val = jj_consume_token(STRING);
                     {if (true) return val.image;}
    throw new Error("Missing return statement in function");
  }

// check if no attributes can be transfered - ()
  static final public String ValueObj(String identifier) throws ParseException {
                                      Token id, id2; String valInt = "", valStr = "", objAttrVal = "", moreIden = "", params = "", retVal = ""; Variable v, v2, vTemp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      // Point p1 = p2
          id = jj_consume_token(IDENTIFIER);
        if(varTable.get(id.image) == null)
            {if (true) throw new ParseException(id.image + " is not declared");}

        if(varTable.get(id.image).type == "String" || varTable.get(id.image).type == "Integer")
            {if (true) throw new ParseException(id.image + " is not the same type");}

        Variable var = new Variable(id.image, identifier, true);

        for(int i = 0; i < varTable.get(id.image).attributesList.size(); i++)
            var.attributesList.add(varTable.get(id.image).attributesList.get(i));

        {if (true) return id.image;}
      break;
    case LP:
      jj_consume_token(LP);
        v = varTable.get(identifier);
        vTemp = varTable.get("Class" + varTable.get(identifier).type);

        for(int i = 0; i < vTemp.attributesList.size(); i++)
        {
            v.attributesList.add(vTemp.attributesList.get(i));
        }

        String className = varTable.get("Class" + varTable.get(identifier).type).type.substring("Class".length());
        String realClassName = className.substring(0, 1).toUpperCase() + className.substring(1);

        retVal += "new " + realClassName + "(";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        valInt = ValueInt();
                v = varTable.get("Class" + varTable.get(identifier).type);

                if(counterForNumOfParams + 1 > v.attributesList.size())
                    {if (true) throw new ParseException("there are more params then you need");}

                if(v.attributesList.get(counterForNumOfParams).type != "Integer")
                    {if (true) throw new ParseException("not the same type");}


                v.attributesList.get(counterForNumOfParams).setValue(valInt);
                params += valInt + ", ";
                counterForNumOfParams++;
        break;
      case STRING:
        valStr = ValueString();
                v = varTable.get("Class" + varTable.get(identifier).type);

                if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

                if(v.attributesList.get(counterForNumOfParams).type != "String")
                    {if (true) throw new ParseException("not the same type");}

                v.attributesList.get(counterForNumOfParams).setValue(valStr);
                params += valStr + ", ";
                counterForNumOfParams++;
        break;
      case IDENTIFIER:
        id2 = jj_consume_token(IDENTIFIER);
        objAttrVal = ObjAttrVal(id2.image);
                v = varTable.get("Class" + varTable.get(identifier).type);
                v2 = varTable.get(id2.image);

                if(v2 == null)
                    {if (true) throw new ParseException(id2.image + " is not declared");}

                if(objAttrVal == "")
                {
                    if(counterForNumOfParams + 1 > v.attributesList.size())
                        {if (true) throw new ParseException("there are more params then you need");}

                    if(v2.type != v.attributesList.get(counterForNumOfParams).type)
                    {
                        {if (true) throw new ParseException(id2.image + " and" + identifier + " are not the same type");}
                    }

                    v.attributesList.get(counterForNumOfParams).setValue(id2.image);
                    params += id2.image + ", ";
                    counterForNumOfParams++;
                }
                else
                {
                    if(counterForNumOfParams + 1 > v.attributesList.size())
                        {if (true) throw new ParseException("there are more params then you need");}

                    if(v2.classAttributes.get(objAttrVal).type != v.attributesList.get(counterForNumOfParams).type)
                        {if (true) throw new ParseException("not the same type");}

                    params += id2.image + objAttrVal + ", ";
                    counterForNumOfParams++;
                }

                if(v.type != "Integer")
                    {if (true) throw new ParseException("not the same type");}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      moreIden = MoreIdentifier(identifier);
      jj_consume_token(RP);
        v = varTable.get(identifier);
        vTemp = varTable.get("Class" + varTable.get(identifier).type);


        if(counterForNumOfParams != vTemp.attributesList.size())
            {if (true) throw new ParseException("the number of params you've entered are not the same");}

        params += moreIden;

        if(params.charAt(params.length() - 1) == ' ' &&  params.charAt(params.length() - 2) == ',')
            params = params.substring(0, params.length() - 2);

        retVal += params + ")";
        {if (true) return retVal;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MoreIdentifier(String classObj) throws ParseException {
                                          Token id; String attrVal = "", valInt = "", valStr = "", moreIdens = "", params = ""; Variable v, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
        attrVal = ObjAttrVal(classObj);
            v = varTable.get("Class" + varTable.get(classObj).type);
                v2 = varTable.get(id.image);

            if(v2 == null)
                {if (true) throw new ParseException(id.image + " is not declared");}

            if(attrVal == "")
            {
                if(counterForNumOfParams + 1 > v.attributesList.size())
                    {if (true) throw new ParseException("there are more params then you need");}

                if(v2.type != v.attributesList.get(counterForNumOfParams).type)
                {
                    {if (true) throw new ParseException(id.image + " and" + classObj + " are not the same type");}
                }

                params += id.image + ", ";
                counterForNumOfParams++;
            }
            else
            {
                if(v2.classAttributes.get(attrVal).type != v.attributesList.get(counterForNumOfParams).type)
                    {if (true) throw new ParseException("not the same type");}

                params += id.image + attrVal + ", ";
                counterForNumOfParams++;
            }

            if(v.type != "Integer")
                {if (true) throw new ParseException("not the same type");}
        break;
      case NUM:
        valInt = ValueInt();
            v = varTable.get("Class" + varTable.get(classObj).type);

            if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

            if(v.attributesList.get(counterForNumOfParams).type != "Integer")
                {if (true) throw new ParseException("not the same type");}

            params += valInt + ", ";
            counterForNumOfParams++;
        break;
      case STRING:
        valStr = ValueString();
            v = varTable.get("Class" + varTable.get(classObj).type);

            if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

            if(v.attributesList.get(counterForNumOfParams).type != "String")
                {if (true) throw new ParseException("not the same type");}

            params += valStr + ", ";
            counterForNumOfParams++;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      moreIdens = MoreIdentifiers(classObj);
        {if (true) return params + moreIdens;}
      break;
    default:
      jj_la1[14] = jj_gen;

              {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MoreIdentifiers(String classObj) throws ParseException {
                                           Token id; String attrVal = "", valInt = "", valStr = "", moreIdens = "", params = ""; Variable v, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
        attrVal = ObjAttrVal(classObj);
            v = varTable.get("Class" + varTable.get(classObj).type);
            v2 = varTable.get(id.image);

            if(v2 == null)
                {if (true) throw new ParseException(id.image + " is not declared");}

            if(attrVal == "")
            {
                if(counterForNumOfParams + 1 > v.attributesList.size())
                    {if (true) throw new ParseException("there are more params then you need");}

                if(v2.type != v.attributesList.get(counterForNumOfParams).type)
                {
                    {if (true) throw new ParseException(id.image + " and" + classObj + " are not the same type");}
                }

                params += id.image + ", ";
                counterForNumOfParams++;
            }
            else
            {
                if(counterForNumOfParams + 1 > v.attributesList.size())
                    {if (true) throw new ParseException("there are more params then you need");}

                if(v2.classAttributes.get(attrVal).type != v.attributesList.get(counterForNumOfParams).type)
                    {if (true) throw new ParseException("not the same type");}

                params += id.image + attrVal + ", ";
                counterForNumOfParams++;
            }

            if(v.type != "Integer")
                {if (true) throw new ParseException("not the same type");}
        break;
      case NUM:
        valInt = ValueInt();
            v = varTable.get("Class" + varTable.get(classObj).type);

            if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

            if(v.attributesList.get(counterForNumOfParams).type != "Integer")
                {if (true) throw new ParseException("not the same type");}

            params += valInt + ", ";
            counterForNumOfParams++;
        break;
      case STRING:
        valStr = ValueString();
            v = varTable.get("Class" + varTable.get(classObj).type);

            if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

            if(v.attributesList.get(counterForNumOfParams).type != "String")
                {if (true) throw new ParseException("not the same type");}

            params += valStr + ", ";
            counterForNumOfParams++;
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      moreIdens = MoreIdentifiers(classObj);
        {if (true) return params + moreIdens;}
      break;
    default:
      jj_la1[16] = jj_gen;

          {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String ObjAttrVal(String classObj) throws ParseException {
                                      Token id; String moreVals = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINT:
      jj_consume_token(POINT);
      id = jj_consume_token(IDENTIFIER);
      moreVals = MoreObjAttrVals(classObj);
        if(varTable.get(classObj) == null || !varTable.get(classObj).isClass)
            {if (true) throw new ParseException(classObj + " is not a class");}

        {if (true) return "." + id.image + moreVals;}
      break;
    default:
      jj_la1[17] = jj_gen;

           {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MoreObjAttrVals(String classObj) throws ParseException {
                                           Token id; String moreVals = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINT:
      jj_consume_token(POINT);
      id = jj_consume_token(IDENTIFIER);
      moreVals = MoreObjAttrVals(classObj);
        if(varTable.get(classObj) == null || !varTable.get(classObj).isClass)
            {if (true) throw new ParseException(classObj + " is not a class");}

        {if (true) return "." + id.image + moreVals;}
      break;
    default:
      jj_la1[18] = jj_gen;

         {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String innerValue(String type, String ObjName) throws ParseException {
                                                  Token id; String res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINT:
      jj_consume_token(POINT);
      id = jj_consume_token(IDENTIFIER);
      res = innerValues(type, ObjName);
        if(type == "String" || type == "Integer")
            {if (true) throw new ParseException(ObjName + " is not an object");}

        Variable var = varTable.get(ObjName);

        int j = 0;
        for(int i = 0; i < var.attributesList.size(); i++)
        {
            if(var.attributesList.get(i).name.equals(id.image))
                j++;
        }

        if(j == var.attributesList.size())
            {if (true) throw new ParseException(id.image + " is not an attribute in the class");}

        {if (true) return "." + id.image + " " + res;}
      break;
    default:
      jj_la1[19] = jj_gen;

             {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String innerValues(String type, String ObjName) throws ParseException {
                                                   Token id; String res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINT:
      jj_consume_token(POINT);
      id = jj_consume_token(IDENTIFIER);
      res = innerValues(type, ObjName);
        if(type == "String" || type == "Integer")
        {if (true) throw new ParseException(ObjName + " is not an object");}

        Variable var = varTable.get(ObjName);

        if(!var.attributesList.contains(id.image))
            {if (true) throw new ParseException(id.image + " is not an attribute in the class");}

        {if (true) return "." + id.image + " " + res;}
      break;
    default:
      jj_la1[20] = jj_gen;

             {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MoreIdentifierInt(String type) throws ParseException {
                                          Token id, id2, num; String op = "", valInt = "", moreIdenInt = "", id2ToString = "", numToString = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case OP2:
        op = OpAssign(id.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          valInt = ValueInt();
          break;
        case IDENTIFIER:
          id2 = jj_consume_token(IDENTIFIER);
          jj_consume_token(OP1);
          num = jj_consume_token(NUM);
                id2ToString = id2.image;
                numToString = num.image;
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;

             valInt = " null";
      }
      moreIdenInt = MoreIdentifierInt("Integer");
        if(varTable.containsKey(id.image))
            {if (true) throw new ParseException(id.image + " is already declared");}

        Variable var = new Variable("Integer", id.image, false);
        varTable.put(id.image, var);

        String retVal = ", " + id.image;

        if(op == "??=")
        {
            if(valInt != "")
            {
                {if (true) return retVal + " ??= " + valInt + moreIdenInt;}
            }
            else
            {
                {if (true) return retVal + " ??= " + id2ToString + numToString + " " + moreIdenInt;}
            }
        }
        else if(op == "=")
        {
            if(valInt != "")
            {
                {if (true) return retVal + op + valInt + moreIdenInt;}
            }
            else
            {
                {if (true) return retVal + op + id2ToString + numToString + moreIdenInt;}
            }
        }
        else
        {
            {if (true) return retVal + " = null" + moreIdenInt;}
        }
      break;
    default:
      jj_la1[23] = jj_gen;

         {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MoreIdentifierString(String type) throws ParseException {
                                             Token id, id2, string; String op = "", valStr = "", moreIdenStr = "", id2ToString = "", stringToString = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case OP2:
        op = OpAssign(id.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          valStr = ValueString();
          break;
        case IDENTIFIER:
          id2 = jj_consume_token(IDENTIFIER);
          jj_consume_token(OP1);
          string = jj_consume_token(STRING);
                id2ToString = id2.image;
                stringToString = string.image;
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[25] = jj_gen;

             valStr = " null";
      }
      moreIdenStr = MoreIdentifierString("String");
        if(varTable.containsKey(id.image))
            {if (true) throw new ParseException(id.image + " is already declared");}

        Variable var = new Variable("String", id.image, false);
        varTable.put(id.image, var);

        String retVal = ", " + id.image;

        if(op == "??=")
        {
            if(valStr != "")
            {
                {if (true) return retVal + " ??= " + valStr + moreIdenStr;}
            }
            else
            {
                {if (true) return retVal + " ??= " + id2ToString + stringToString + moreIdenStr;}
            }
        }
        else if(op == "=")
        {
            if(valStr != "")
            {
                {if (true) return retVal + " = " + valStr + moreIdenStr + " = null";}
            }
            else
            {
                {if (true) return retVal + " = " + id2ToString + stringToString + moreIdenStr;}
            }
        }
        else
        {
            {if (true) return retVal + moreIdenStr;}
        }
      break;
    default:
      jj_la1[26] = jj_gen;

         {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MoreIdentifierObj(String type, String className) throws ParseException {
                                                           Token id; String moreIdenObj = "", retVal = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
        Variable var = new Variable("Class" + className, id.image, true);
        varTable.put(id.image, var);
      // (OpAssign() ValueString() | {})
          moreIdenObj = MoreIdentifierObj(type, className);
        {if (true) return ", " + id.image + " = null " + moreIdenObj;}
      break;
    default:
      jj_la1[27] = jj_gen;

         {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DefObj() throws ParseException {
                 String attributesFromFunction = ""; Token id;
    jj_consume_token(DEFINE);
    id = jj_consume_token(IDENTIFIER);
        if(isClassDefined.contains(id.image))
            {if (true) throw new ParseException(id.image + " is already defined");}

        // (String type, boolean isClass)
        Variable var = new Variable("Class" + id.image, "Class" + id.image, true);
        varTable.put("Class" + id.image, var);
        isClassDefined.add(id.image);
    jj_consume_token(AS);
    jj_consume_token(LC);
    attributesFromFunction = ClassAttributes(var);
    jj_consume_token(RC);
    jj_consume_token(SEMI_COLON);
        String className = id.image.substring(0, 1).toUpperCase() + id.image.substring(1);
        String newClass = "class " + className + " {\u005cn";
        String decAttrs = "";
        String constructor = "\u005ct\u005ctpublic " + className + "(";
        String innerConstructor = "";
        String toString = "\u005ct\u005ctpublic String toString(){\u005cn\u005ct\u005ct\u005ctreturn \u005c"(";
        String classAttributes;
        java.util.Iterator it = var.classAttributes.entrySet().iterator();
        while (it.hasNext())
        {
            java.util.Map.Entry curr = (java.util.Map.Entry)it.next();
            Variable currVar = (Variable)curr.getValue();
            String key = (String)curr.getKey();
            decAttrs += "\u005ct\u005ctpublic " + currVar.type + " " + key + ";\u005cn";
            constructor += currVar.type + " " + key + ", ";
            innerConstructor += "\u005ct\u005ct\u005ctthis." + key + " = " + key + ";\u005cn";
            toString += key + " =\u005c" + " + "this." + key + " + \u005c", ";
        }


        constructor = constructor.substring(0, constructor.length()-2);
        constructor += "){\u005cn" + innerConstructor + "\u005ct\u005ct}\u005cn";
        toString = toString.substring(0, toString.length()-2);
        toString += ")\u005c";\u005cn\u005ct\u005ct}";

        declaredClasses += newClass + decAttrs + constructor + "\u005cn" + toString + "\u005cn\u005ct}\u005cn";
        {if (true) return;}
  }

  static final public String ClassAttributes(Variable var) throws ParseException {
                                        Token type, identifier; String moreIden = "", moreAttributes = ""; Variable attribute;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEC_INT:
      type = jj_consume_token(DEC_INT);
      break;
    case DEC_STRING:
      type = jj_consume_token(DEC_STRING);
      break;
    case IDENTIFIER:
      type = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    identifier = jj_consume_token(IDENTIFIER);
    moreIden = MoreSameLineIdentifiers(var, type.image);
    jj_consume_token(SEMI_COLON);
        if(type.image == "string")
        {
            type.image = "String";
        }

        else if(type.image == "int")
        {
            type.image = "Integer";
        }

        if(var.classAttributes.containsKey(identifier.image))
            {if (true) throw new ParseException(identifier.image + " is already defined as an attribute in the class");}


        if(type.image == "String" || type.image == "Integer")
        {
            attribute = new Variable(type.image, identifier.image, false);
            var.classAttributes.put(identifier.image, attribute);
        }
        else
        {
            attribute = new Variable(type.image, identifier.image, true);
            var.classAttributes.put(identifier.image, attribute);
        }

        var.attributesList.add(attribute);
    moreAttributes = MoreClassAttributes(var);
        String retVal = type.image + " " + identifier.image;

        if(moreIden != "")
        {
            retVal += " " + moreIden + ";";
        }
        else
        {
            retVal += ";";
        }

        if(moreAttributes != "")
        {
            retVal += "\u005cn\u005ct" + moreAttributes;
        }

        {if (true) return retVal + "\u005cn";}
    throw new Error("Missing return statement in function");
  }

  static final public String MoreSameLineIdentifiers(Variable var, String type) throws ParseException {
                                                             Token identifier; String moreIden = ""; Variable attribute;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      identifier = jj_consume_token(IDENTIFIER);
        if(type == "string")
        {
            attribute = new Variable("String", identifier.image, false);
        }
        else if(type == "int")
        {
            attribute = new Variable("Integer", identifier.image, false);
        }
        else
        {
            attribute = new Variable(type, identifier.image, true);
        }

        if(var.classAttributes.containsKey(identifier.image))
            {if (true) throw new ParseException(identifier.image + " is already defined as an attribute in the class");}

        var.classAttributes.put(identifier.image, attribute);

        var.attributesList.add(attribute);
      moreIden = MoreSameLineIdentifiers(var, type);
        String retVal = ", " + identifier.image;

        if(moreIden != "")
        {
            retVal += " " + moreIden;
        }

        {if (true) return retVal;}
      break;
    default:
      jj_la1[29] = jj_gen;

         {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String MoreClassAttributes(Variable var) throws ParseException {
                                            String attributes = "", moreAttributes = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEC_INT:
    case DEC_STRING:
    case IDENTIFIER:
      attributes = ClassAttributes(var);
      moreAttributes = MoreClassAttributes(var);
        {if (true) return attributes + " " + moreAttributes;}
      break;
    default:
      jj_la1[30] = jj_gen;

         {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Print() throws ParseException {
                  Token printVal; String innerVal = "", type;
    jj_consume_token(PRINT);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      printVal = jj_consume_token(STRING);
      break;
    case NUM:
      printVal = jj_consume_token(NUM);
      break;
    case IDENTIFIER:
      printVal = jj_consume_token(IDENTIFIER);
            type = varTable.get(printVal.image).type;
      innerVal = innerValue(type, printVal.image);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RP);
    jj_consume_token(SEMI_COLON);
        String retVal = "System.out.println(";
        retVal += printVal.image;

        if(innerVal != "")
        {
            retVal += innerVal;
        }

        retVal += ");";

        {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  static final public String DeclareObjOrAssign(String identifierOrClass) throws ParseException {
                                                       String assign = "", decObj = ""; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
      decObj = DecObj(id.image, identifierOrClass);
      jj_consume_token(SEMI_COLON);
        {if (true) return id.image + " " + decObj + ";";}
      break;
    case EQ:
    case OP2:
      assign = Assign(identifierOrClass);
      jj_consume_token(SEMI_COLON);
        {if (true) return assign + ";\u005cn";}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String DecObj(String identifier, String type) throws ParseException {
                                                 String decObj = "", moreIdenObj = "";
        if(varTable.containsKey(identifier) && (varTable.get(identifier).type == "String" || varTable.get(identifier).type == "Integer"))
            {if (true) throw new ParseException(identifier + " is already declared");}

        Variable var = new Variable(type, identifier, true);
        varTable.put(identifier, var);
    decObj = DecObjAssign(identifier);
    moreIdenObj = MoreIdentifierObj(identifier, type);
        {if (true) return decObj + moreIdenObj;}
    throw new Error("Missing return statement in function");
  }

//TODO: check if identifier is initialized and not a class
  static final public String Assign(String identifier) throws ParseException {
                                    String op = "", rightReg = "", rightObj = "";
    op = OpAssign(identifier);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case NUM:
    case STRING:
      rightReg = AssignRightReg(identifier);
      break;
    case LP:
      rightObj = AssignRightObj(identifier);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(op == "??=")
        {
            // retVal = t.image + innerVal + " == null ? " + t2.image + " : " +  t.image;
            if(rightReg != "")
                {if (true) return op + " " + rightReg;}

            {if (true) return op + " " + rightObj;}
        }
        else if(op == "=")
        {
            if(rightReg != "")
                {if (true) return op + " " + rightReg;}

            {if (true) return op + " " + rightObj;}
        }
    throw new Error("Missing return statement in function");
  }

  static final public String AssignRightReg(String identifier) throws ParseException {
                                            Token t, t2; String innerVal = "", type = "", innerType = "", value = "", retVal = ""; boolean isIden = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
            type = "String";
            retVal = t.image;
      break;
    case NUM:
      t = jj_consume_token(NUM);
            type = "Integer";
            retVal = t.image;
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
            if(varTable.get(t.image) == null)
                {if (true) throw new ParseException(t.image + " is not declared");}

            type = varTable.get(t.image).type;
            isIden = true;
      innerVal = innerValue(type, t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP1:
        jj_consume_token(OP1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          t2 = jj_consume_token(NUM);
                        innerType = "Integer";
          break;
        case STRING:
          t2 = jj_consume_token(STRING);
                        innerType = "String";
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                if(varTable.get(identifier) == null)
                    {if (true) throw new ParseException(identifier + " is not declared");}

                if(!isIden || !varTable.containsKey(t.image))
                    {if (true) throw new ParseException(t.image + " is not identifier");}

                if(varTable.get(identifier).type != innerType)
                    {if (true) throw new ParseException(t.image + " is not the same type as identifier");}


                if(varTable.get(t.image).getValue() == "null")
                    varTable.get(identifier).setValue(t2.image);
                else
                    varTable.get(identifier).setValue(varTable.get(t.image).getValue());

                retVal = t.image + innerVal + " == null ? " + t2.image + " : " +  t.image;
        break;
      default:
        jj_la1[35] = jj_gen;

      }
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(varTable.get(identifier) == null)
            {if (true) throw new ParseException(identifier + " is not declared");}

        Variable var = varTable.get(identifier);

        if(var.type != type)
            {if (true) throw new ParseException(identifier + " are not the same type");}

        {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  static final public String AssignRightObj(String identifier) throws ParseException {
                                            Token id, id2; String valInt = "", valStr = "", objAttrVal = "", moreIden = "", params = "", retVal = ""; Variable v, v2, vTemp;
    jj_consume_token(LP);
        v = varTable.get(identifier);
        vTemp = varTable.get(varTable.get(identifier).type);

        for(int i = 0; i < vTemp.attributesList.size(); i++)
        {
            v.attributesList.add(vTemp.attributesList.get(i));
        }

        String className = varTable.get(varTable.get(identifier).type).type.substring("Class".length());
        String realClassName = className.substring(0, 1).toUpperCase() + className.substring(1);

        retVal += "new " + realClassName + "(";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      valStr = ValueString();
            v = varTable.get(varTable.get(identifier).type);

            if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

            if(v.attributesList.get(counterForNumOfParams).type != "String")
                {if (true) throw new ParseException("not the same type");}

            v.attributesList.get(counterForNumOfParams).setValue(valStr);
            params += valStr + ", ";
            counterForNumOfParams++;
      break;
    case NUM:
      valInt = ValueInt();
            v = varTable.get(varTable.get(identifier).type);

            if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

            if(v.attributesList.get(counterForNumOfParams).type != "Integer")
                {if (true) throw new ParseException("not the same type");}


            v.attributesList.get(counterForNumOfParams).setValue(valInt);
            params += valInt + ", ";
            counterForNumOfParams++;
      break;
    case IDENTIFIER:
      id2 = jj_consume_token(IDENTIFIER);
      objAttrVal = ObjAttrVal(id2.image);
            v = varTable.get(varTable.get(identifier).type);
            v2 = varTable.get(id2.image);

            if(v2 == null)
                {if (true) throw new ParseException(id2.image + " is not declared");}

            if(objAttrVal == "")
            {
                if(counterForNumOfParams + 1 > v.attributesList.size())
                    {if (true) throw new ParseException("there are more params then you need");}

                if(v2.type != v.attributesList.get(counterForNumOfParams).type)
                {
                    {if (true) throw new ParseException(id2.image + " and" + identifier + " are not the same type");}
                }

                v.attributesList.get(counterForNumOfParams).setValue(id2.image);
                params += id2.image + ", ";
                counterForNumOfParams++;
            }
            else
            {
                if(counterForNumOfParams + 1 > v.attributesList.size())
                    {if (true) throw new ParseException("there are more params then you need");}

                if(v2.classAttributes.get(objAttrVal).type != v.attributesList.get(counterForNumOfParams).type)
                    {if (true) throw new ParseException("not the same type");}

                params += id2.image + objAttrVal + ", ";
                counterForNumOfParams++;
            }

            if(v.type != "Integer")
                {if (true) throw new ParseException("not the same type");}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    moreIden = MoreAssignRightObj(identifier);
    jj_consume_token(RP);
        v = varTable.get(identifier);
        vTemp = varTable.get(varTable.get(identifier).type);


        if(counterForNumOfParams != vTemp.attributesList.size())
            {if (true) throw new ParseException("the number of params you've entered are not the same");}

        params += moreIden;

        if(params.charAt(params.length() - 1) == ' ' &&  params.charAt(params.length() - 2) == ',')
            params = params.substring(0, params.length() - 2);

        retVal += params + ")";
        {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  static final public String MoreAssignRightObj(String classObj) throws ParseException {
                                              Token id; String attrVal = "", valInt = "", valStr = "", moreVals = "", params = ""; Variable v, v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        valStr = ValueString();
            v = varTable.get(varTable.get(classObj).type);

            if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

            if(v.attributesList.get(counterForNumOfParams).type != "String")
                {if (true) throw new ParseException("not the same type");}

            params += valStr + ", ";
            counterForNumOfParams++;
        break;
      case NUM:
        valInt = ValueInt();
            v = varTable.get(varTable.get(classObj).type);

            if(counterForNumOfParams + 1 > v.attributesList.size())
                {if (true) throw new ParseException("there are more params then you need");}

            if(v.attributesList.get(counterForNumOfParams).type != "Integer")
                {if (true) throw new ParseException("not the same type");}

            params += valInt + ", ";
            counterForNumOfParams++;
        break;
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
        moreVals = ObjAttrVal(id.image);
            v = varTable.get(varTable.get(classObj).type);
                v2 = varTable.get(id.image);

            if(v2 == null)
                {if (true) throw new ParseException(id.image + " is not declared");}

            if(attrVal == "")
            {
                if(counterForNumOfParams + 1 > v.attributesList.size())
                    {if (true) throw new ParseException("there are more params then you need");}

                if(v2.type != v.attributesList.get(counterForNumOfParams).type)
                {
                    {if (true) throw new ParseException(id.image + " and" + classObj + " are not the same type");}
                }

                params += id.image + ", ";
                counterForNumOfParams++;
            }
            else
            {
                if(v2.classAttributes.get(attrVal).type != v.attributesList.get(counterForNumOfParams).type)
                    {if (true) throw new ParseException("not the same type");}

                params += id.image + attrVal + ", ";
                counterForNumOfParams++;
            }

            if(v.type != "Integer")
                {if (true) throw new ParseException("not the same type");}
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      moreVals = MoreAssignRightObj(classObj);
        {if (true) return params + moreVals;}
      break;
    default:
      jj_la1[39] = jj_gen;

         {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String OpQMInt(String identifier, String initId) throws ParseException {
                                                    Token op1, val;
    op1 = jj_consume_token(OP1);
    val = jj_consume_token(NUM);
        if(varTable.get(identifier).getValue() == "null")
            varTable.get(initId).setValue(val.image);

        {if (true) return " == null ?" + val.image + " : " + identifier;}
        // return op1.image + " " + val.image;

    throw new Error("Missing return statement in function");
  }

  static final public String OpQMStr(String identifier) throws ParseException {
                                     Token op1, val;
    op1 = jj_consume_token(OP1);
    val = jj_consume_token(STRING);
        {if (true) return " == null ?" + val.image + " : " + identifier;}
        // return op1.image + " " + val.image;

    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DartCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x83c0000,0x83c0000,0x180000,0x8000,0x28000000,0x14000,0x8000,0x48000000,0x14000,0x14000,0x14000,0x68000000,0x8000400,0x68000000,0x40,0x68000000,0x40,0x200,0x200,0x200,0x200,0x28000000,0x14000,0x40,0x48000000,0x14000,0x40,0x40,0x8180000,0x40,0x8180000,0x68000000,0x8014000,0x68000400,0x60000000,0x8000,0x68000000,0x68000000,0x68000000,0x40,};
   }

  /** Constructor with InputStream. */
  public DartCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DartCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DartCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DartCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DartCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DartCompiler(DartCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DartCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
